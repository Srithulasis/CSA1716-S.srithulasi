import heapq

class Node:
    def __init__(self, position):
        self.position = position
        self.g = 0  # Cost from start node to current node
        self.h = 0  # Heuristic (estimated cost from current node to goal node)
        self.f = 0  # Total cost (g + h)
        self.parent = None

    def __lt__(self, other):
        return self.f < other.f

def astar_search(graph, start, goal):
    open_list = []
    closed_set = set()

    start_node = Node(start)
    goal_node = Node(goal)

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.position == goal_node.position:
            path = []
            while current_node is not None:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_set.add(current_node.position)

        for next_position in graph[current_node.position]:
            node = Node(next_position)
            if node.position in closed_set:
                continue

            node.g = current_node.g + 1
            node.h = abs(node.position[0] - goal_node.position[0]) + abs(node.position[1] - goal_node.position[1])
            node.f = node.g + node.h
            node.parent = current_node

            heapq.heappush(open_list, node)

    return None  # No path found

# Example usage:
graph = {
    (0, 0): [(0, 1), (1, 0)],
    (0, 1): [(0, 0), (1, 1)],
    (1, 0): [(0, 0), (1, 1), (2, 0)],
    (1, 1): [(0, 1), (1, 0), (2, 1)],
    (2, 0): [(1, 0), (2, 1)],
    (2, 1): [(1, 1), (2, 0)]
}

start_node = (0, 0)
goal_node = (2, 1)

path = astar_search(graph, start_node, goal_node)
if path:
    print("Path found:", path)
else:
    print("No path found")
